{% extends 'base.html.twig' %}

{% block title %}Création widget{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="{{ asset('css/widget.css') }}">
{% endblock %} 

{% block body %}

<navi>
   <a title="Créer univers" href="{{ path('page_new') }}#first"><i class="far fa-file-alt"></i></a>
   <a title="Créer categorie" href="{{ path('page_new') }}#second"><i class="fas fa-newspaper"></i></a>
   <a title="Voir pages" href="{{ path('pages.list.alls') }}"><i class="fas fa-binoculars"></i></a>
   <a title="Widget" href="{{ path('widget_new') }}"><i class="fas fa-hat-wizard"></i></a>
   <a title="Accueil" href="{{ path('page_new') }}"><i class="fas fa-home"></i></a>
 </navi>

<h1>FORMULAIRE DE CRÉATION D'UN WIDGET'</h1>
<hr style="width:70%">

 <div class="post-new-content">

    <div class="post-form-bottom">
        {{ form_start(form) }}

            <p style="text-align:center; font-weight:bold;">
            {% for success2 in app.flashes('success2') %}
            {{ success2 }}
            {% endfor %}

            <h2> Nom du widget</h2>
            {{ form_row(form.nom) }}
            <hr style="width:30%">

            <h2>Composants</h2>
            <p>Fait glisser les images des composants vers les icones ➕ pour ajouter ou modifier des éléments du widget</p>
            <p>Passer la souris au dessus des images à glisser pour avoir plus de détails</p>
            <div class="box-input-content">
                
              <div class="drag-drop-box">
                <h3>N°1</h3>
                {{ form_row(form.content) }}
                <label  class="file-input__label" for="widget_form_content">
                  <i class="fas fa-plus fas1"></i>
                  <i class="fas fa-thumbs-up fa1"></i>
                </label>
                <h3 id="nmb-widget">Aucun</h3>
              </div>

              <div class="drag-drop-box">
                <h3>N°2</h3>
                {{ form_row(form.content2) }}
                <label  class="file-input__label" for="widget_form_content">
                  <i class="fas fa-plus fas2"></i>
                  <i class="fas fa-thumbs-up fa2"></i>
                </label>
                <h3 id="nmb-widget2">Aucun</h3>
              </div>

            </div>
  
    <div class="panel panel-default" id="chars">
      <div class="panel-body">

        
          <div
          title="SVG animé"
          style="background-image: url('https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/SVG_Logo.svg/1200px-SVG_Logo.svg.png');"
          class="textelement" 
          id="char10"
          >
          
            <svg width="240" height="240" viewBox="0 0 240 240" fill="none" xmlns="http://www.w3.org/2000/svg">
            <defs>
            <path id="move-path" d="M102.546 83.5C109.859 70.8333 128.141 70.8333 135.454 83.5L157.971 122.5C165.284 135.167 156.143 151 141.517 151H96.4833C81.8571 151 72.7158 135.167 80.0289 122.5L102.546 83.5Z" fill="#D9D9D9"/>
            <filter id="goo">
            <feGaussianBlur in="SourceGraphic" stdDeviation="5" result="blur" />
            <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 60 -32"/>
            </filter>
            </defs>
            <g filter="url(#goo)">
            <circle cx="119" cy="74" r="20" stroke="#6f8191" stroke-width="8"/>
            <circle cx="79" cy="141" r="20" stroke="#6f8191" stroke-width="8"/>
            <circle cx="157" cy="141" r="20" stroke="#6f8191" stroke-width="8"/>
            <circle cx="0" cy="0" r="14" fill="#6f8191">
            <animateMotion path="M102.546 83.5C109.859 70.8333 128.141 70.8333 135.454 83.5L157.971 122.5C165.284 135.167 156.143 151 141.517 151H96.4833C81.8571 151 72.7158 135.167 80.0289 122.5L102.546 83.5Z" dur="2s" repeatCount="indefinite" />
            </circle> 
            </g>
            </svg>
            
          </div>


        <div
         title="Une belle image de banane !"
         style="background-image: url('https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Bananas.svg/560px-Bananas.svg.png');"
         class="textelement" 
         id="char20"
         >
         <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Bananas.svg/560px-Bananas.svg.png" alt="test">
         </div>

        <div
         title="Fantome en HTML et CSS !"
         style="background-image: url('{{ asset('images/multiverse/widget/ghost.png') }}');"
         class="textelement" 
         id="char30">
         
         <div class="ghost"><div class="eye left"></div><div class="eye right"></div><div class="mounth"></div><div class="arm left"></div><div class="arm right"></div><div class="bottom one"></div><div class="bottom two"></div><div class="bottom three"></div><div class="bottom four"></div></div>
         <style>.ghost {width: 150px;height: 180px;margin: auto;background-color: white;border-top-left-radius: 110px;border-top-right-radius: 110px;border-bottom: 0;position: relative;margin-top: 15%;-webkit-animation: float 3s linear infinite;animation: float 3s linear infinite;}@-webkit-keyframes float {0% {-webkit-transform: translateY(0px);transform: translateY(0px);opacity: 1;}50% {-webkit-transform: translateY(300px);transform: translateY(300px);opacity: 1;}100% {-webkit-transform: translateY(0px);transform: translateY(0px);opacity: 1;}}@keyframes float {0% {-webkit-transform: translateY(0px);transform: translateY(0px);opacity: 1;}50% {-webkit-transform: translateY(50px);transform: translateY(50px);opacity: 1;}100% {-webkit-transform: translateY(0px);transform: translateY(0px);opacity: 1;}}.eye{width: 30px;height: 30px;background-color: #2A3A4A;border-radius: 50%;position: absolute;}.eye.left{top: 50px;left: 30px;}.eye.right{top: 50px;right: 30px;}.mounth{width: 40px;height: 20px;background-color: #2A3A4A;position: absolute;border-bottom-left-radius: 110px;border-bottom-right-radius: 110px;border-top: 0;bottom: 70px;left: 55px;}.arm{width: 30px;height: 30px;background-color: #ffffff;position: absolute;border-top: 0;bottom: 70px;}.arm.left{border-top-left-radius: 110px;border-bottom-left-radius: 110px;left: -20px;}.arm.right{border-top-right-radius: 110px;border-bottom-right-radius: 110px;right: -20px;}.bottom{width: 37.5px;height: 30px;background-color: #ffffff;position: absolute;border-top: 0;border-bottom-left-radius: 110px;border-bottom-right-radius: 110px;bottom: -15px;}.bottom.one{left: 0px;}.bottom.two{left: 37.5px;}.bottom.three{left: 75px;}.bottom.four{left: 112.5px;}</style>

         </div>
         
         <div
         title="Model interractif 3d !"
         style="background-image: url('{{ asset('images/multiverse/widget/model3d.png') }}');"
         class="textelement" 
         id="char40">
         
          <style>
#c {

  width: 100%;
  height: 100%;
  display: block;
}
</style>

<canvas id="c"></canvas>
<script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/108/three.min.js'></script>
<script src='https://cdn.jsdelivr.net/gh/mrdoob/Three.js@r92/examples/js/loaders/GLTFLoader.js'></script>
<script>
(function() {
// Set our main variables
let scene,  
  renderer,
  camera,
  model,                              // Our character
  neck,                               // Reference to the neck bone in the skeleton
  waist,                               // Reference to the waist bone in the skeleton
  possibleAnims,                      // Animations found in our file
  mixer,                              // THREE.js animations mixer
  idle,                               // Idle, the default state our character returns to
  clock = new THREE.Clock(),          // Used for anims, which run to a clock instead of frame rate 
  currentlyAnimating = false,         // Used to check whether characters neck is being used in another anim
  raycaster = new THREE.Raycaster(),  // Used to detect the click on our character
  loaderAnim = document.getElementById('js-loader');
  
  init(); 

function init() {
  const MODEL_PATH = 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/stacy_lightweight.glb';
  
  const canvas = document.querySelector('#c');
  const backgroundColor = 0xf1f1f1;

    // Init the scene
  scene = new THREE.Scene();
  scene.background = new THREE.Color(backgroundColor);
  scene.fog = new THREE.Fog(backgroundColor, 60, 100);
  
  // Init the renderer
  renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
  renderer.shadowMap.enabled = true;
  renderer.setPixelRatio(window.devicePixelRatio);
  document.body.appendChild(renderer.domElement);
  
  // Add a camera
  camera = new THREE.PerspectiveCamera(
    50,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  camera.position.z = 30 
  camera.position.x = 0;
  camera.position.y = -3;
  
  let stacy_txt = new THREE.TextureLoader().load('https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/stacy.jpg');

  stacy_txt.flipY = false; // we flip the texture so that its the right way up

  const stacy_mtl = new THREE.MeshPhongMaterial({
    map: stacy_txt,
    color: 0xffffff,
    skinning: true
  });
  
  var loader = new THREE.GLTFLoader();
  
  loader.load(
    MODEL_PATH,
    function(gltf) {
     // A lot is going to happen here
      model = gltf.scene;
      let fileAnimations = gltf.animations;
      
      model.traverse(o => {
        if (o.isMesh) {
          o.castShadow = true;
          o.receiveShadow = true;
          o.material = stacy_mtl; // Add this line
        }
        
        
          // Reference the neck and waist bones
          if (o.isBone && o.name === 'mixamorigNeck') { 
            neck = o;
          }
          if (o.isBone && o.name === 'mixamorigSpine') { 
            waist = o;
          }
      });
         
      
      // Set the models initial scale
      model.scale.set(7, 7, 7);
      
      model.position.y = -11
      
      
      scene.add(model);
      loaderAnim.remove();
      
      mixer = new THREE.AnimationMixer(model);
      let clips = fileAnimations.filter(val => val.name !== 'idle');
      possibleAnims = clips.map(val => {
        let clip = THREE.AnimationClip.findByName(clips, val.name);
        clip.tracks.splice(3, 3);
        clip.tracks.splice(9, 3);
        clip = mixer.clipAction(clip);
        return clip;
      });
      
      let idleAnim = THREE.AnimationClip.findByName(fileAnimations, 'idle');
      idleAnim.tracks.splice(3, 3);
      idleAnim.tracks.splice(9, 3);
      idle = mixer.clipAction(idleAnim);
      idle.play();
      
    },
    undefined, // We don't need this function
    function(error) {
      console.error(error);
    }
  );
  
  // Add lights
  let hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.61);
  hemiLight.position.set(0, 50, 0);
  // Add hemisphere light to scene
  scene.add(hemiLight);

  let d = 8.25;
  let dirLight = new THREE.DirectionalLight(0xffffff, 0.54);
  dirLight.position.set(-8, 12, 8);
  dirLight.castShadow = true;
  dirLight.shadow.mapSize = new THREE.Vector2(1024, 1024);
  dirLight.shadow.camera.near = 0.1;
  dirLight.shadow.camera.far = 1500;
  dirLight.shadow.camera.left = d * -1;
  dirLight.shadow.camera.right = d;
  dirLight.shadow.camera.top = d;
  dirLight.shadow.camera.bottom = d * -1;
  // Add directional Light to scene
  scene.add(dirLight);
  
  // Floor
  let floorGeometry = new THREE.PlaneGeometry(5000, 5000, 1, 1);
  let floorMaterial = new THREE.MeshPhongMaterial({
    color: 0xeeeeee,
    shininess: 0,
  });

  let floor = new THREE.Mesh(floorGeometry, floorMaterial);
  floor.rotation.x = -0.5 * Math.PI; // This is 90 degrees by the way
  floor.receiveShadow = true;
  floor.position.y = -11;
  scene.add(floor);
  
  
  let geometry = new THREE.SphereGeometry(8, 32, 32);
  let material = new THREE.MeshBasicMaterial({ color: 0x9bffaf }); // 0xf2ce2e 
  let sphere = new THREE.Mesh(geometry, material);
  sphere.position.z = -15;
  sphere.position.y = -2.5;
  sphere.position.x = -0.25;
  scene.add(sphere);
}

function update() {
  
  if (mixer) {
    mixer.update(clock.getDelta());
  }
  if (resizeRendererToDisplaySize(renderer)) {
    const canvas = renderer.domElement;
    camera.aspect = canvas.clientWidth / canvas.clientHeight;
    camera.updateProjectionMatrix();
  }
  renderer.render(scene, camera);
  requestAnimationFrame(update);
}
update();

function resizeRendererToDisplaySize(renderer) {
  const canvas = renderer.domElement;
  let width = window.innerWidth;
  let height = window.innerHeight;
  let canvasPixelWidth = canvas.width / window.devicePixelRatio;
  let canvasPixelHeight = canvas.height / window.devicePixelRatio;

  const needResize =
    canvasPixelWidth !== width || canvasPixelHeight !== height;
  if (needResize) {
    renderer.setSize(width, height, false);
  }
  return needResize;
}
  
  window.addEventListener('click', e => raycast(e));
window.addEventListener('touchend', e => raycast(e, true));

function raycast(e, touch = false) {
  var mouse = {};
  if (touch) {
    mouse.x = 2 * (e.changedTouches[0].clientX / window.innerWidth) - 1;
    mouse.y = 1 - 2 * (e.changedTouches[0].clientY / window.innerHeight);
  } else {
    mouse.x = 2 * (e.clientX / window.innerWidth) - 1;
    mouse.y = 1 - 2 * (e.clientY / window.innerHeight);
  }
  // update the picking ray with the camera and mouse position
  raycaster.setFromCamera(mouse, camera);

  // calculate objects intersecting the picking ray
  var intersects = raycaster.intersectObjects(scene.children, true);

  if (intersects[0]) {
    var object = intersects[0].object;

    if (object.name === 'stacy') {

      if (!currentlyAnimating) {
        currentlyAnimating = true;
        playOnClick();
      }
    }
  }
}
  
  // Get a random animation, and play it 
 function playOnClick() {
  let anim = Math.floor(Math.random() * possibleAnims.length) + 0;
  playModifierAnimation(idle, 0.25, possibleAnims[anim], 0.25);
}
  
  function playModifierAnimation(from, fSpeed, to, tSpeed) {
  to.setLoop(THREE.LoopOnce);
  to.reset();
  to.play();
  from.crossFadeTo(to, fSpeed, true);
  setTimeout(function() {
    from.enabled = true;
    to.crossFadeTo(from, tSpeed, true);
    currentlyAnimating = false;
  }, to._clip.duration * 1000 - ((tSpeed + fSpeed) * 1000));
}
  
  document.addEventListener('mousemove', function(e) {
    var mousecoords = getMousePos(e);
    if (neck && waist) {
      moveJoint(mousecoords, neck, 50);
      moveJoint(mousecoords, waist, 30);
    }
  });

  function getMousePos(e) {
    return { x: e.clientX, y: e.clientY };
  }
  
  document.addEventListener('mousemove', function(e) {
    var mousecoords = getMousePos(e);
      if (neck && waist) {

        moveJoint(mousecoords, neck, 50);
        moveJoint(mousecoords, waist, 30);
      }
  });

  function getMousePos(e) {
    return { x: e.clientX, y: e.clientY };
  }
  
    function moveJoint(mouse, joint, degreeLimit) {
      let degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit);
      joint.rotation.y = THREE.Math.degToRad(degrees.x);
      joint.rotation.x = THREE.Math.degToRad(degrees.y);
      console.log(joint.rotation.x);
    }
  
    function getMouseDegrees(x, y, degreeLimit) {
    let dx = 0,
        dy = 0,
        xdiff,
        xPercentage,
        ydiff,
        yPercentage;

    let w = { x: window.innerWidth, y: window.innerHeight };

    // Left (Rotates neck left between 0 and -degreeLimit)
     // 1. If cursor is in the left half of screen
    if (x <= w.x / 2) {
     // 2. Get the difference between middle of screen and cursor position
      xdiff = w.x / 2 - x; 
      // 3. Find the percentage of that difference (percentage toward edge of screen)
      xPercentage = (xdiff / (w.x / 2)) * 100; 
      // 4. Convert that to a percentage of the maximum rotation we allow for the neck
      dx = ((degreeLimit * xPercentage) / 100) * -1; 
    }
    
    // Right (Rotates neck right between 0 and degreeLimit)
    if (x >= w.x / 2) {
      xdiff = x - w.x / 2;
      xPercentage = (xdiff / (w.x / 2)) * 100;
      dx = (degreeLimit * xPercentage) / 100;
    }
    // Up (Rotates neck up between 0 and -degreeLimit)
    if (y <= w.y / 2) {
      ydiff = w.y / 2 - y;
      yPercentage = (ydiff / (w.y / 2)) * 100;
      // Note that I cut degreeLimit in half when she looks up
      dy = (((degreeLimit * 0.5) * yPercentage) / 100) * -1;
    }
    // Down (Rotates neck down between 0 and degreeLimit)
    if (y >= w.y / 2) {
      ydiff = y - w.y / 2;
      yPercentage = (ydiff / (w.y / 2)) * 100;
      dy = (degreeLimit * yPercentage) / 100;
    }
    return { x: dx, y: dy };
  }
})(); // Don't add anything below this line
</script>

         </div>
         <div
         style="background-image: url('https://play-lh.googleusercontent.com/pPSrfoQBVHFPKfedOIDgIKixeWooXcvxIRHJlA98q5LwrJuwus4nPtUOoVNKWeUugA');"
         class="textelement" 
         id="char50"
         >En cours d'amélioration...</div>
         <div
         style="background-image: url('https://play-lh.googleusercontent.com/pPSrfoQBVHFPKfedOIDgIKixeWooXcvxIRHJlA98q5LwrJuwus4nPtUOoVNKWeUugA');"
         class="textelement" 
         id="char60"
         >En cours d'amélioration...</div>
         <div
         style="background-image: url('https://play-lh.googleusercontent.com/pPSrfoQBVHFPKfedOIDgIKixeWooXcvxIRHJlA98q5LwrJuwus4nPtUOoVNKWeUugA');"
         class="textelement" 
         id="char70"
         >En cours d'amélioration...</div>
         <div
         style="background-image: url('https://play-lh.googleusercontent.com/pPSrfoQBVHFPKfedOIDgIKixeWooXcvxIRHJlA98q5LwrJuwus4nPtUOoVNKWeUugA');"
         class="textelement" 
         id="char80"
         >En cours d'amélioration...</div>
         <div
         style="background-image: url('https://play-lh.googleusercontent.com/pPSrfoQBVHFPKfedOIDgIKixeWooXcvxIRHJlA98q5LwrJuwus4nPtUOoVNKWeUugA');"
         class="textelement" 
         id="char90"
         >En cours d'amélioration...</div>
         <div
         style="background-image: url('https://play-lh.googleusercontent.com/pPSrfoQBVHFPKfedOIDgIKixeWooXcvxIRHJlA98q5LwrJuwus4nPtUOoVNKWeUugA');"
         class="textelement" 
         id="char99"
         >En cours d'amélioration...</div>
      
      </div>
    </div>

            <button type="submit" class="btn btn-primary btnC">Créer un widget</button>

        {{ form_end(form) }}
    </div>
</div>

<script src="https://kit.fontawesome.com/d5fba335cd.js" crossorigin="anonymous"></script>
<script src="{{ asset('js/universe/widget.js') }}"></script>
{% endblock %}